alias funcnum R1;
alias currPID R2;
alias inode_id R3;
alias counter R4;

breakpoint;

//accquire buffer
if(funcnum==1)then
	alias buffer_num R3;
	while([BUFFER_TABLE+(4*buffer_num)+2]!=-1)do
		[PROCESS_TABLE+(16*currPID)+4]=WAIT_BUFFER;
		[PROCESS_TABLE+(16*currPID)+5]=buffer_num;
		backup;
		call MOD_5;
		restore;
	endwhile;

	//lock buffer by setting lock pid to curr pid
	[BUFFER_TABLE+(4*buffer_num)+2]=currPID;

	return;

endif;

//release buffer
if(funcnum==2)then
	alias buffer_num R3;

	//IF GIVEN PID IS NOT EQUAL  TO LOCKING PID
	if(currPID!=[BUFFER_TABLE+(4*buffer_num)+2])then
		R0=-1;
		return;
	endif;

	//free the lock in buffer table in given buffer num entry set locking pid
	[BUFFER_TABLE+(4*buffer_num)+2]=-1;

	//wake up all process waiting for this buffer
	counter=0;
	while(counter<16)do
		alias process_table R5;
		process_table=PROCESS_TABLE+(counter*16);
		if(([process_table+4]==WAIT_BUFFER) && ([process_table+5]==buffer_num))then
			[process_table+4]=READY;
		endif;
		counter=counter+1;
	endwhile;

	R0=0;
	return;
endif;

//accquire disk
if(funcnum==3)then

//disk busy invoke scheduler
while([DISK_STATUS_TABLE]==1)do
		[PROCESS_TABLE+currPID*16+4]=WAIT_DISK;
		backup;
		call MOD_5;
		restore;
endwhile;

//locking the disk table
	[DISK_STATUS_TABLE]=1;
	[DISK_STATUS_TABLE+4]=currPID;

endif;
//Acquire inode (4)
if(funcnum==ACQUIRE_INODE)then
	alias curr_PT R5;

	curr_PT=PROCESS_TABLE+(currPID*16);

	//wait for inode to be freed by another process
	while([FILE_STATUS_TABLE+4*(inode_id)]!=-1)do
		[curr_PT+4]=WAIT_FILE;
		[curr_PT+5]=inode_id;
		//call scheduler
		call MOD_5;
		restore;
	endwhile;

	if([INODE_TABLE+(16*inode_id)+1]==-1)then
		R0=-1;
		return;
	endif;

	//lock the inode by setting lock field to pid of current process
	[FILE_STATUS_TABLE+(4*inode_id)]=currPID;
	//return 0
	R0=0;
	return;

endif;

//Release inode 5
if(funcnum==RELEASE_INODE)then
	alias inode_id R3;
	alias i R4;
	//if pid given not equal to locking pid in file status table return -1
	if(currPID!=[FILE_STATUS_TABLE+4*inode_id])then
		R0=-1;
		return;
	endif;

	//free the lock status table corresponding to inode index
	[FILE_STATUS_TABLE+4*(inode_id)]=-1;
	//wake up all process waiting for this inode index
	i=0;
	while(i<16)do
		alias curr_PT R5;
		curr_PT=PROCESS_TABLE+(i*16);
		if(([curr_PT+4]==WAIT_FILE) && ([curr_PT+5]==inode_id)) then
			[curr_PT+4]=READY;
		endif;
		i=i+1;
	endwhile;
	R0=0;
	return;

endif;

//accquire SEMAPHORE
if(funcnum==ACQUIRE_SEMAPHORE)then
	alias freeEntry R4;
	freeEntry=-1;
	counter=0;
	while(counter<MAX_SEM_COUNT)do
		if([SEMAPHORE_TABLE+(counter*4)+1]==0)then
			freeEntry=counter;
			break;
		endif;
		counter=counter+1;
	endwhile;

	if(freeEntry==-1)then
		R0=-1;
		return;
	endif;
	//set process count to 1
	[SEMAPHORE_TABLE+(freeEntry*4)+1]=1;
	//set LOCLKING_PID to -1
	[SEMAPHORE_TABLE+(freeEntry*4)]=-1;
	R0=freeEntry;
	return;
endif;

//release SEMAPHORE
if(funcnum==RELEASE_SEMAPHORE)then
	alias semid R4;

	//check if locking pid is equal to current pid
	if([SEMAPHORE_TABLE+(semid*4)]==currPID)then
		//set locking pid to -1;
		[SEMAPHORE_TABLE+(4*semid)]=-1;
		counter=0;
		while(counter<16)do
			if(([PROCESS_TABLE+(counter*16)+4]==WAIT_SEMAPHORE) && ([PROCESS_TABLE+(counter*16)+5]==semid))then
				[PROCESS_TABLE+(counter*16)+4]=READY;
			endif;
			counter=counter+1;
			endwhile;
			R0=0;
	else
		R0=-1;
	endif;
	//decrement process_count of semaphore in semaphore table,if process count is 0 semaphore is free
	[SEMAPHORE_TABLE+(semid*4)+1]=[SEMAPHORE_TABLE+(semid*4)+1]-1;
	return;

endif;

//accquire terminal
if(funcnum==8)then
	//print "Accquire terminal";
	while([TERMINAL_STATUS_TABLE]!=0) do
		[PROCESS_TABLE+16*currPID+4]=WAIT_TERMINAL;
		backup;
		call MOD_5;
		restore;
	endwhile;
	[TERMINAL_STATUS_TABLE]=1;
	[TERMINAL_STATUS_TABLE+1]=currPID;
	return;
endif;

//release treminal
if(funcnum==9)then
	if(currPID==[TERMINAL_STATUS_TABLE+1])then
		[TERMINAL_STATUS_TABLE]=0;
	counter=0;
	while(counter<=15)do
		if([PROCESS_TABLE+16*counter+4]==WAIT_TERMINAL)then
			[PROCESS_TABLE+16*counter+4]=READY;
		endif;
		counter = counter + 1;
	endwhile;
	R0=0;
	else
		R0=-1;
		return;
	endif;
endif;

return;
			


alias funcnum R1;
alias currPID R2;
alias counter R3;

breakpoint;

//accquire disk
if(funcnum==3)then

//disk busy invoke scheduler
while([DISK_STATUS_TABLE]==1)do
		[PROCESS_TABLE+currPID*16+4]=WAIT_DISK;
		backup;
		call MOD_5;
		restore;
endwhile;

//locking the disk table
	[DISK_STATUS_TABLE]=1;
	[DISK_STATUS_TABLE+4]=currPID;

endif;

//accquire SEMAPHORE
if(funcnum==ACQUIRE_SEMAPHORE)then
	alias freeEntry R4;
	freeEntry=-1;
	counter=0;
	while(counter<MAX_SEM_COUNT)do
		if([SEMAPHORE_TABLE+(counter*4)+1]==0)then
			freeEntry=counter;
			break;
		endif;
		counter=counter+1;
	endwhile;

	if(freeEntry==-1)then
		R0=-1;
		return;
	endif;
	//set process count to 1
	[SEMAPHORE_TABLE+(freeEntry*4)+1]=1;
	//set LOCLKING_PID to -1
	[SEMAPHORE_TABLE+(freeEntry*4)]=-1;
	R0=freeEntry;
	return;
endif;

//release SEMAPHORE
if(funcnum==RELEASE_SEMAPHORE)then
	alias semid R4;

	//check if locking pid is equal to current pid
	if([SEMAPHORE_TABLE+(semid*4)]==currPID)then
		//set locking pid to -1;
		[SEMAPHORE_TABLE+(4*semid)]=-1;
		counter=0;
		while(counter<16)do
			if(([PROCESS_TABLE+(counter*16)+4]==WAIT_SEMAPHORE) && ([PROCESS_TABLE+(counter*16)+5]==semid))then
				[PROCESS_TABLE+(counter*16)+4]=READY;
			endif;
			counter=counter+1;
			endwhile;
			R0=0;
	else
		R0=-1;
	endif;
	//decrement process_count of semaphore in semaphore table,if process count is 0 semaphore is free
	[SEMAPHORE_TABLE+(semid*4)+1]=[SEMAPHORE_TABLE+(semid*4)+1]-1;
	return;

endif;

//accquire terminal
if(funcnum==8)then
	//print "Accquire terminal";
	while([TERMINAL_STATUS_TABLE]!=0) do
		[PROCESS_TABLE+16*currPID+4]=WAIT_TERMINAL;
		backup;
		call MOD_5;
		restore;
	endwhile;
	[TERMINAL_STATUS_TABLE]=1;
	[TERMINAL_STATUS_TABLE+1]=currPID;
	return;
endif;

//release treminal
if(funcnum==9)then
	if(currPID==[TERMINAL_STATUS_TABLE+1])then
		[TERMINAL_STATUS_TABLE]=0;
	counter=0;
	while(counter<=15)do
		if([PROCESS_TABLE+16*counter+4]==WAIT_TERMINAL)then
			[PROCESS_TABLE+16*counter+4]=READY;
		endif;
		counter = counter + 1;
	endwhile;
	R0=0;
	else
		R0=-1;
		return;
	endif;
endif;

return;
			


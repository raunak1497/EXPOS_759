//EXEC SYSTEM CALL(INT 9)

alias userSP R0;
userSP=SP;

[PROCESS_TABLE+([SYSTEM_STATUS_TABLE+1]*16)+13]=SP;

SP=[PROCESS_TABLE+([SYSTEM_STATUS_TABLE+1]*16)+11]*512-1;

//setting mode flag to exec call
[PROCESS_TABLE+([SYSTEM_STATUS_TABLE+1]*16)+9]=9;

//argument name
alias filename R1;
filename=[[PTBR+2*((userSP-4)/512)]*512+(userSP-4)%512];

alias i R2;
i=1;

alias temp R3;
temp=-1;

//searching inode table for file name
while(i<MAX_FILE_NUM)do
	if(([INODE_TABLE+(i*16)]==EXEC) && ([INODE_TABLE+(i*16)+1]==filename))then
		temp=i;
		break;
	endif;
i=i+1;
endwhile;

if(temp<0)then

	//setting stack to user stack
	SP=userSP;
	//setting mode flag 
	[PROCESS_TABLE+([SYSTEM_STATUS_TABLE+1]*16)+9]=0;

	//setting the return address
	[[PTBR+2*((userSP-1)/512)] * 512 + (userSP-1)%512]=-1;
	ireturn;
endif;

alias exitPID R4;
exitPID=[SYSTEM_STATUS_TABLE+1];

//calling exit process to terminate

backup; 
R1=EXIT_PROCESS;
R2=exitPID;
call MOD_1;
restore;

//user area page num deallocated by exit process with same pid

alias pageNum R5;
pageNum=[PROCESS_TABLE+([SYSTEM_STATUS_TABLE+1]*16)+11];

//incrementing memory free list
[MEMORY_FREE_LIST+pageNum]=[MEMORY_FREE_LIST+pageNum]+1;

//decrementing mem free count
[SYSTEM_STATUS_TABLE+2]=[SYSTEM_STATUS_TABLE+2]-1;

//setting SP to kernel stack
SP=[PROCESS_TABLE+([SYSTEM_STATUS_TABLE+1]*16)+11]*512-1;

//set the state as running
[PROCESS_TABLE +(exitPID*16)+4]=RUNNING;

//storing inode index
[PROCESS_TABLE +(exitPID*16)+7]=temp;

//seeting page table
PTBR=PAGE_TABLE_BASE+exitPID*20;

// SETTING THE PAGE TABLE

breakpoint;

//VALIDATE LIBRARY ENTRIES
[PTBR+0]=63;
[PTBR+1]="0100";
[PTBR+2]=64;
[PTBR+3]="0100";

//VALIDATE STACK ENTRIES

backup;
R1=1;
call MOD_2;
[PTBR+16]=R0;
[PTBR+17]="0110";
restore;

backup;
R1=1;
call MOD_2;
[PTBR+18]=R0;
[PTBR+19]="0110";
restore;

breakpoint;

//INVALIDATE HEAP PAGES
[PTBR+4]=-1;
[PTBR+5]="0000";

[PTBR+6]=-1;
[PTBR+7]="0000";

//VALIDATING CODEPAGES

alias inode_POS R6;
inode_POS=INODE_TABLE+temp*16;

//NO OF CODE PAGES

if([inode_POS+8]!=-1)then
	backup;
	R1=GET_CODE_PAGE;
	R2=[inode_POS+8];
	call MOD_2;
	[PAGE_TABLE_BASE+([SYSTEM_STATUS_TABLE+1]*20)+8]=R0;
	[PAGE_TABLE_BASE+([SYSTEM_STATUS_TABLE+1]*20)+9]="0100";
	restore;
endif;

//invalidate rest of code pages
[PAGE_TABLE_BASE+([SYSTEM_STATUS_TABLE+1]*20)+10]=-1;
[PAGE_TABLE_BASE+([SYSTEM_STATUS_TABLE+1]*20)+11]="0000";
[PAGE_TABLE_BASE+([SYSTEM_STATUS_TABLE+1]*20)+12]=-1;
[PAGE_TABLE_BASE+([SYSTEM_STATUS_TABLE+1]*20)+13]="0000";
[PAGE_TABLE_BASE+([SYSTEM_STATUS_TABLE+1]*20)+14]=-1;
[PAGE_TABLE_BASE+([SYSTEM_STATUS_TABLE+1]*20)+15]="0000";

//INITIALIZE PER PROCESS TABLE
alias offset R7;
offset=496;
while(offset<512)do
	[pageNum*512+offset]=-1;
	offset=offset+2;
endwhile;

breakpoint;

//INITIALIZE DISK STATUS TABLE
offset=0;
while(offset < 10)do
	[DISK_MAP_TABLE+(10*[SYSTEM_STATUS_TABLE+1])+offset]=-1;
	offset=offset+1;
endwhile;

[DISK_MAP_TABLE+(10*[SYSTEM_STATUS_TABLE+1])+4]=[inode_POS+8];//map block 1
[DISK_MAP_TABLE+(10*[SYSTEM_STATUS_TABLE+1])+5]=[inode_POS+9];//map block 2
[DISK_MAP_TABLE+(10*[SYSTEM_STATUS_TABLE+1])+6]=[inode_POS+10];//map block 3
[DISK_MAP_TABLE+(10*[SYSTEM_STATUS_TABLE+1])+7]=[inode_POS+11];//map block 4



[[PTBR+16]*512]=[[PTBR+8]*512+1];
SP=8*512;

[PROCESS_TABLE+([SYSTEM_STATUS_TABLE+1]*16)+9]=0;
PTBR=PAGE_TABLE_BASE+(20*[SYSTEM_STATUS_TABLE+1]);

ireturn;

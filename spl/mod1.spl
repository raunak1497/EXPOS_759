alias funcNum R1;
alias currPID R2;

//free user page
if(funcNum==2)then
	
	//release page
	backup;
	R1=2;
	R2=[PROCESS_TABLE+currPID*16+11];
	call MOD_2;
	restore;
	return;
endif;

//exit process
if(funcNum==3)then
	
	//free page table
	backup;
	R1=4;
	R2=currPID;
	call MOD_1;
	restore;
	
	//free user area page
	backup;
	R1=2;
	R2=currPID;
	call MOD_1;
	restore;

	//terminating the calling process
	[PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16+4]=TERMINATED;

	return;
endif;


//free page table
if(funcNum==4)then
	alias temp R3;
	alias disk_entry R4;

//Inavalidate library page
	[PTBR+0]=-1;
	[PTBR+1]="0000";
	[PTBR+2]=-1;
	[PTBR+3]="0000";

disk_entry=DISK_MAP_TABLE+currPID*10;
breakpoint;

//release block
while(temp<10)do
	if(([disk_entry+temp]!=-1)&&(temp==2||temp==3||temp==8||temp==9))then
		backup;
		R1=4;//RELEASE BLOCK
		R2=[disk_entry+temp];//block number
		call MOD_2; //memory manager
		restore;
	endif;
	[disk_entry+temp]=-1;
	temp=temp+1;
endwhile;

breakpoint;

//Release the page	
temp=4;
while(temp<20)do
		if([PTBR+temp]!=-1)then

			backup;
			R1=2;
			R2=[PTBR+temp];
			call MOD_2;
			restore;

			[PTBR+temp]=-1;
			[PTBR+temp+1]="0000";

		endif;
		temp=temp+2;
endwhile;

return;
endif;

return;


alias funcNum R1;
alias currPID R2;

breakpoint;

//get pcb entry
if(funcNum==1)then
	alias i R5;
	i=0;
	while(i<16)do
		if([PROCESS_TABLE+(i*16)+4]==TERMINATED)then
			R0=i;
			[PROCESS_TABLE+(i*16)+1]=i;
			[PROCESS_TABLE+(i*16)+4]=ALLOCATED;//set the state to allocated
			[PROCESS_TABLE+(i*16)+14]=PAGE_TABLE_BASE+(20*i);//initialising ptbr to start of process table
			[PROCESS_TABLE+(i*16)+15]=10;//PTLR
			return;
		endif;
		i=i+1;
	endwhile;
	R0=-1;
	return;
endif;

//free user area page
if(funcNum==2)then
	alias userareaPage R3;
	alias i R4;

	userareaPage=[PROCESS_TABLE+currPID*16+11];
	//for every valid semaphore entry invoke release semaphore

	i=0;
	while(i<15)do
		if([userareaPage*512+i+496]==SEMAPHORE)then
			backup;
			R1=RELEASE_SEMAPHORE;
			R2=currPID;
			R3=[userareaPage*512+i+496+1]; //semid
			call MOD_0;
			restore;
			[userareaPage*512+i+496]=-1;
		endif;
		if([userareaPage*512+i+496]==FILE)then
			backup;
			R1=CLOSE;
			R2=[userareaPage*512+496+i+1];
			call MOD_3;
			restore;
			[userareaPage*512+i+496]=-1;
		endif;
		
		i=i+2;
	endwhile;

	//release page
	backup;
	R1=2;
	R2=userareaPage;
	call MOD_2;
	restore;

	return;
endif;

//exit process
if(funcNum==3)then
	if([PROCESS_TABLE+(currPID*16)+9]!=9)then
		alias i R3;
		i=0;
		while(i<16)do

		//wake up all the process waiting for current process to exit
			if(([PROCESS_TABLE+(i*16)+4]==WAIT_PROCESS)&& ([PROCESS_TABLE+i*16+5]==currPID))then
				[PROCESS_TABLE+(i*16)+4]=READY;
			endif;

			//setting the ppid of the child to orphan 
			if([PROCESS_TABLE+(16*i)+5]==currPID)then
				[PROCESS_TABLE+(16*i)+2]=-1;
			endif;

			i=i+1;
			
		endwhile;
	endif;

	//free page table
	backup;
	R1=FREE_PAGE_TABLE;
	R2=currPID;
	call MOD_1;
	restore;
	
	//free user area page
	backup;
	R1=FREE_PAGE_TABLE;
	R2=currPID;
	call MOD_1;
	restore;

	//terminating the calling process
	[PROCESS_TABLE+(currPID*16)+4]=TERMINATED;

	return;
endif;


//free page table
if(funcNum==4)then
	alias temp R3;
	alias disk_entry R4;

//Inavalidate library page
	[PTBR+0]=-1;
	[PTBR+1]="0000";
	[PTBR+2]=-1;
	[PTBR+3]="0000";

disk_entry=DISK_MAP_TABLE+currPID*10;
breakpoint;

//release block
while(temp<10)do
	if(([disk_entry+temp]!=-1)&&(temp==2||temp==3||temp==8||temp==9))then
		backup;
		R1=4;//RELEASE BLOCK
		R2=[disk_entry+temp];//block number
		call MOD_2; //memory manager
		restore;
	endif;
	[disk_entry+temp]=-1;
	temp=temp+1;
endwhile;

breakpoint;

//Release the page	
temp=4;
while(temp<20)do
		if([PTBR+temp]!=-1)then

			backup;
			R1=2;
			R2=[PTBR+temp];
			call MOD_2;
			restore;

			[PTBR+temp]=-1;
			[PTBR+temp+1]="0000";

		endif;
		temp=temp+2;
endwhile;

return;
endif;

return;


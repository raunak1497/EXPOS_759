//EXCEPTION HANDLER
loadi(2,15);
loadi(3,16);

//TIMER INTERRUPT
loadi(4,17);
loadi(5,18);

//LIBRARY
loadi(63,13);
loadi(64,14);

//INIT
loadi(65,7);
loadi(66,8);

//CODE PAGES
loadi(85,69);
loadi(86,70);

//MODULE 0
loadi(40,53);
loadi(41,54);

//MODULE 1
loadi(42,55);
loadi(43,56);

//MODULE 2
loadi(44,57);
loadi(45,58);

//MODULE 3
loadi(46,59);
loadi(47,60);

//MODULE 4
loadi(48,61);
loadi(49,62);

//CONSOLE
loadi(8,21);
loadi(9,22);

//INT 4
loadi(10,23);
loadi(11,24);

//INT 5
loadi(12,25);
loadi(13,26)

//INT 6
loadi(14,27);
loadi(15,28);

//INT 7
loadi(16,29);
loadi(17,30);

//INT 8
loadi(18,31);
loadi(19,32);

//INT 9
loadi(20,33);
loadi(21,34);

//INT 10
loadi(22,35);
loadi(23,36);

//INT 11
loadi(24,37);
loadi(25,38);

//INT 13
loadi(28,41);
loadi(29,42);

//INT 14
loadi(30,43);
loadi(31,44);

//INT 15
loadi(32,45);
loadi(33,46);

//INODE TABLE
loadi(59,3);
loadi(60,4);

//DISK INTERRUPT
loadi(6,19);
loadi(7,20);

//DISK FREE LIST
loadi(61,2);

//INODE AND USER TABLE
loadi(59,3);
loadi(60,4);

PTBR=PAGE_TABLE_BASE+20;

//LIBRARY
[PTBR+0]=63;
[PTBR+1]="0100";
[PTBR+2]=64;
[PTBR+3]="0100";

//HEAP
[PTBR+4]=78;
[PTBR+5]="0110";
[PTBR+6]=79;
[PTBR+7]="0110";

//CODE
[PTBR+8]=65;
[PTBR+9]="0100";
[PTBR+10]=66;
[PTBR+11]="0100";
[PTBR+12]=-1;
[PTBR+13]="0000";
[PTBR+14]=-1;
[PTBR+15]="0000";

//STACK
[PTBR+16]=76;
[PTBR+17]="0110";
[PTBR+18]=77;
[PTBR+19]="0110";

[76*512]=[65*512+1];

PTLR=10;

[PROCESS_TABLE+16+1]=1;
[PROCESS_TABLE+16+3]=1;
[PROCESS_TABLE+16+4]=CREATED;
[PROCESS_TABLE+16+11]=80;
[PROCESS_TABLE+16+12]=0;
[PROCESS_TABLE+16+13]=8*512;
[PROCESS_TABLE+16+14]=PTBR;
[PROCESS_TABLE+16+15]=PTLR;

[TERMINAL_STATUS_TABLE+0]=0;

alias counter R0;
alias i R4;


counter=2;
while(counter<=15)do
	[PROCESS_TABLE+counter*16 +4]=TERMINATED;
	counter = counter + 1;
endwhile;

//initialize memory free list
i=0;
while(i<128)do
	if(i<83)then
		[MEMORY_FREE_LIST+i]=1;
	else
		[MEMORY_FREE_LIST+i]=0;
	endif;
	i=i+1;
endwhile;

[SYSTEM_STATUS_TABLE+2]=45;
[SYSTEM_STATUS_TABLE+3]=0;

//disk status table
[DISK_STATUS_TABLE]=0;

//initialising per process table
alias g R5;
g=82*512-1+512;

alias c R6;
c=0;

while(c<16)do
	[g-c]=-1;
	c=c+1;
endwhile;

//initialise disk map table
i=0;
while(i<10)do
	[DISK_MAP_TABLE+10+i]=-1;
	i=i+1;
endwhile;

[DISK_MAP_TABLE+10+4]=7;
[DISK_MAP_TABLE+10+5]=8;
[DISK_MAP_TABLE+10+6]=-1;
[DISK_MAP_TABLE+10+7]=-1;

alias semaphore_table R6;
i=0;

while(i<MAX_SEM_COUNT)do
	semaphore_table=SEMAPHORE_TABLE+(i*4);
	[semaphore_table]=-1;
	[semaphore_table+1]=0;
	i=i+1;
endwhile;

//initialize file status table
i=0;
while(i<MAX_FILE_NUM)do
	[FILE_STATUS_TABLE+(i*4)]=-1;
	[FILE_STATUS_TABLE+(i*4)+1]=-1;
	i=i+1;
endwhile;

//initialize the buffer table
i=0;
while(i<MAX_BUFFER)do

	[BUFFER_TABLE+(i*4)]=-1;//BLOCK NUMBER
	[BUFFER_TABLE+(i*4)+1]=0;//DIRTY BIT
	[BUFFER_TABLE+(i*4)+2]=-1;//LOCKING PID

	i=i+1;
endwhile;
return;
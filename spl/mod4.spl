alias funcnum R1;
alias currPID R2;
alias pageNo R3;
alias blockNo R4;


//disk store 1
if(funcnum==DISK_STORE)then
		
		backup;
		R1=ACQUIRE_DISK;//accquire disk
		R2=currPID;//pid
		call MOD_0;
		restore;

		[DISK_STATUS_TABLE+1]=1;//store
		[DISK_STATUS_TABLE+2]=pageNo;//pageno
		[DISK_STATUS_TABLE+3]=blockNo;//blockNo
		store(pageNo,blockNo);
		[PROCESS_TABLE+(currPID*16)+4]=WAIT_DISK;

		backup;
		call MOD_5;
		restore;
		
		return;
endif;

//terminal write 3
if(funcnum==TERMINAL_WRITE)then
	backup;
	R1=8;
	R2=[SYSTEM_STATUS_TABLE+1];
	call MOD_0;
	restore;
	print R3;

	backup;
	R1=9;
	R2=[SYSTEM_STATUS_TABLE+1];
	call MOD_0;
	restore;

	return;
endif;

//terminal read 4
if(funcnum==TERMINAL_READ)then
	backup;
	R1=8;
	R2=[SYSTEM_STATUS_TABLE+1];
	//breakpoint;
	call MOD_0;
	restore;
	read;
	[PROCESS_TABLE+([SYSTEM_STATUS_TABLE+1]*16)+4]=WAIT_TERMINAL;

	backup;
	//breakpoint;
	call MOD_5;
	restore;
	[[PTBR+2*((R3)/512)]*512+((R3)%512)]=[PROCESS_TABLE+([SYSTEM_STATUS_TABLE+1]*16)+8];

	return;
endif;

//loading disk 2
if(funcnum==DISK_LOAD)then
	
//accquire disk in resource manager 
	backup;
	R1=3;
	R2=currPID;
	call MOD_0;
	restore;

//setting up disk table
	[DISK_STATUS_TABLE]=1;
	[DISK_STATUS_TABLE+1]=0;
	[DISK_STATUS_TABLE+2]=pageNo;
	[DISK_STATUS_TABLE+3]=blockNo;
	[DISK_STATUS_TABLE+4]=currPID;

//issuing the load statement
	load(pageNo,blockNo);

//setting status to wait disk 
[PROCESS_TABLE+currPID*16+4]=WAIT_DISK;
	backup;
	call MOD_5;
	restore;
endif;

return;
